library(scales) # out of bound color scaling (installed with ggplot2)
# install.packages('gganimate')
library(gganimate)
utm_coords_depthbar <- transform_coord(lon = my_dbars_df$lon, lat = my_dbars_df$lat, new.names = c("lon.utm", "lat.utm"),
proj.og = "+proj=longlat +datum=WGS84",
proj.out = "+proj=stere +lat_0=90 +lat_ts=71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0",
map.type = 'panarctic',
verbose = FALSE,
bind = FALSE)
# lat = 71, lon 140 - 220
lonseq <- seq(140,220,80/75)
lonseq <- rev(lonseq)
my_dbars_df <- data.frame(my_dbars)
my_dbars_df$lat <- 69
my_dbars_df$lon <- lonseq
utm_coords_depthbar <- transform_coord(lon = my_dbars_df$lon, lat = my_dbars_df$lat, new.names = c("lon.utm", "lat.utm"),
proj.og = "+proj=longlat +datum=WGS84",
proj.out = "+proj=stere +lat_0=90 +lat_ts=71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0",
map.type = 'panarctic',
verbose = FALSE,
bind = FALSE)
# lat = 71, lon 140 - 220
lonseq <- seq(140,220,80/75)
lonseq <- rev(lonseq)
my_dbars_df <- data.frame(levels_dbar)
my_dbars_df$lat <- 69
my_dbars_df$lon <- lonseq
utm_coords_depthbar <- transform_coord(lon = my_dbars_df$lon, lat = my_dbars_df$lat, new.names = c("lon.utm", "lat.utm"),
proj.og = "+proj=longlat +datum=WGS84",
proj.out = "+proj=stere +lat_0=90 +lat_ts=71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0",
map.type = 'panarctic',
verbose = FALSE,
bind = FALSE)
i <- 3
nna <- which(!is.na(fdata[as.character(levels_dbar[i])]))
# plot
basemap("panarctic", bathymetry = TRUE, limits = min_lat, bathy.style = "poly_greys") +
geom_point(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = fdata[nna, as.character(my_dbars[i])]), alpha = .25) +
scale_color_viridis(name = 'Temp (°C)', option = "C", breaks = my_breaks, labels = round(my_breaks,1), limits = c(minT,maxT), oob = squish) +
geom_point(data = utm_coords_depthbar[i,], aes(x = lon.utm, y = lat.utm), color = "darkslategray", shape = 13, size = 4)
min_lat <- 71 # degrees N, for plot & data filter
utm_coords <- transform_coord(lon = fdata$longitude, lat = fdata$latitude, new.names = c("lon.utm", "lat.utm"),
proj.og = "+proj=longlat +datum=WGS84",
proj.out = "+proj=stere +lat_0=90 +lat_ts=71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0",
map.type = 'panarctic',
verbose = FALSE,
bind = FALSE)
# plot params
minT <- -2
maxT <- 2
my_breaks <- seq(minT,maxT,by = ((maxT - minT)/7))
nna <- which(!is.na(fdata[as.character(levels_dbar[i])]))
# plot
basemap("panarctic", bathymetry = TRUE, limits = min_lat, bathy.style = "poly_greys") +
geom_point(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = fdata[nna, as.character(my_dbars[i])]), alpha = .25) +
scale_color_viridis(name = 'Temp (°C)', option = "C", breaks = my_breaks, labels = round(my_breaks,1), limits = c(minT,maxT), oob = squish) +
geom_point(data = utm_coords_depthbar[i,], aes(x = lon.utm, y = lat.utm), color = "darkslategray", shape = 13, size = 4)
ggsave(paste0(sprintf("%03.0f",my_dbars[i]),".png"), width = 7, height = 5, dpi = 240)
basemap("panarctic", bathymetry = TRUE, limits = min_lat, bathy.style = "poly_greys") +
geom_point(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = fdata[nna, as.character(my_dbars[i])]), alpha = .25) +
scale_color_viridis(name = 'Temp (°C)', option = "C", breaks = my_breaks, labels = round(my_breaks,1), limits = c(minT,maxT), oob = squish) +
geom_point(data = utm_coords_depthbar[i,], aes(x = lon.utm, y = lat.utm), color = "darkslategray", shape = 13, size = 4)
utm_coords <- transform_coord(lon = fdata$longitude, lat = fdata$latitude, new.names = c("lon.utm", "lat.utm"),
proj.og = "+proj=longlat +datum=WGS84",
proj.out = "+proj=stere +lat_0=90 +lat_ts=71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0",
map.type = 'panarctic',
verbose = FALSE,
bind = FALSE)
utm_coords <- transform_coord(lon = as.numeric(fdata$longitude), lat = as.numeric(fdata$latitude), new.names = c("lon.utm", "lat.utm"),
proj.og = "+proj=longlat +datum=WGS84",
proj.out = "+proj=stere +lat_0=90 +lat_ts=71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0",
map.type = 'panarctic',
verbose = FALSE,
bind = FALSE)
basemap("panarctic", bathymetry = TRUE, limits = min_lat, bathy.style = "poly_greys") +
geom_point(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = fdata[nna, as.character(my_dbars[i])]), alpha = .25) +
scale_color_viridis(name = 'Temp (°C)', option = "C", breaks = my_breaks, labels = round(my_breaks,1), limits = c(minT,maxT), oob = squish) +
geom_point(data = utm_coords_depthbar[i,], aes(x = lon.utm, y = lat.utm), color = "darkslategray", shape = 13, size = 4)
basemap("panarctic", bathymetry = TRUE, limits = min_lat, bathy.style = "poly_greys") +
geom_point(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = fdata[nna, as.character(levels_dbar[i])]), alpha = .25) +
scale_color_viridis(name = 'Temp (°C)', option = "C", breaks = my_breaks, labels = round(my_breaks,1), limits = c(minT,maxT), oob = squish) +
geom_point(data = utm_coords_depthbar[i,], aes(x = lon.utm, y = lat.utm), color = "darkslategray", shape = 13, size = 4)
basemap("panarctic", bathymetry = TRUE, limits = min_lat, bathy.style = "poly_greys") +
geom_point(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = as.numeric(fdata[nna, as.character(levels_dbar[i])])), alpha = .25) +
scale_color_viridis(name = 'Temp (°C)', option = "C", breaks = my_breaks, labels = round(my_breaks,1), limits = c(minT,maxT), oob = squish) +
geom_point(data = utm_coords_depthbar[i,], aes(x = lon.utm, y = lat.utm), color = "darkslategray", shape = 13, size = 4)
for(i in 1:length(levels_dbar)) {
nna <- which(!is.na(fdata[as.character(levels_dbar[i])]))
# plot
basemap("panarctic", bathymetry = TRUE, limits = min_lat, bathy.style = "poly_greys") +
geom_point(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = as.numeric(fdata[nna, as.character(levels_dbar[i])])), alpha = .25) +
scale_color_viridis(name = 'Temp (°C)', option = "C", breaks = my_breaks, labels = round(my_breaks,1), limits = c(minT,maxT), oob = squish) +
geom_point(data = utm_coords_depthbar[i,], aes(x = lon.utm, y = lat.utm), color = "darkslategray", shape = 13, size = 4)
ggsave(paste0(sprintf("%03.0f",levels_dbar[i]),".png"), width = 7, height = 5, dpi = 240)
}
i <- 3
basemap("panarctic", bathymetry = TRUE, limits = min_lat, bathy.style = "poly_greys") +
geom_point(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = as.numeric(fdata[nna, as.character(levels_dbar[i])])), alpha = .10, position = "jitter") +
scale_color_viridis(name = 'Temp (°C)', option = "C", breaks = my_breaks, labels = round(my_breaks,1), limits = c(minT,maxT), oob = squish) +
geom_point(data = utm_coords_depthbar[i,], aes(x = lon.utm, y = lat.utm), color = "darkslategray", shape = 13, size = 4)
?geom_hex
basemap("panarctic", bathymetry = TRUE, limits = min_lat, bathy.style = "poly_greys") +
# geom_point(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = as.numeric(fdata[nna, as.character(levels_dbar[i])])), alpha = .10, position = "jitter") +
geom_hex(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = as.numeric(fdata[nna, as.character(levels_dbar[i])])), alpha = .25) +
scale_color_viridis(name = 'Temp (°C)', option = "C", breaks = my_breaks, labels = round(my_breaks,1), limits = c(minT,maxT), oob = squish) +
geom_point(data = utm_coords_depthbar[i,], aes(x = lon.utm, y = lat.utm), color = "darkslategray", shape = 13, size = 4)
install.packages('hexbin')
library(hexbin)
basemap("panarctic", bathymetry = TRUE, limits = min_lat, bathy.style = "poly_greys") +
# geom_point(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = as.numeric(fdata[nna, as.character(levels_dbar[i])])), alpha = .10, position = "jitter") +
geom_hex(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = as.numeric(fdata[nna, as.character(levels_dbar[i])])), alpha = .25) +
scale_color_viridis(name = 'Temp (°C)', option = "C", breaks = my_breaks, labels = round(my_breaks,1), limits = c(minT,maxT), oob = squish) +
geom_point(data = utm_coords_depthbar[i,], aes(x = lon.utm, y = lat.utm), color = "darkslategray", shape = 13, size = 4)
basemap("panarctic", bathymetry = TRUE, limits = min_lat, bathy.style = "poly_greys") +
geom_point(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = as.numeric(fdata[nna, as.character(levels_dbar[i])])), alpha = .25, size = .5 ) +
scale_color_viridis(name = 'Temp (°C)', option = "C", breaks = my_breaks, labels = round(my_breaks,1), limits = c(minT,maxT), oob = squish) +
geom_point(data = utm_coords_depthbar[i,], aes(x = lon.utm, y = lat.utm), color = "darkslategray", shape = 13, size = 4)
# plot
basemap("panarctic", bathymetry = TRUE, limits = min_lat, bathy.style = "poly_greys") +
geom_point(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = as.numeric(fdata[nna, as.character(levels_dbar[i])])), alpha = .25, size = 1.5 ) +
scale_color_viridis(name = 'Temp (°C)', option = "C", breaks = my_breaks, labels = round(my_breaks,1), limits = c(minT,maxT), oob = squish) +
geom_point(data = utm_coords_depthbar[i,], aes(x = lon.utm, y = lat.utm), color = "darkslategray", shape = 13, size = 4)
ggsave(paste0(sprintf("%03.0f",levels_dbar[i]),".png"), width = 7, height = 5, dpi = 240)
}
nna <- which(!is.na(fdata[as.character(levels_dbar[i])]))
basemap("panarctic", bathymetry = TRUE, limits = min_lat, bathy.style = "poly_greys") +
geom_point(data = utm_coords[nna,], aes(x = lon.utm, y = lat.utm, colour = as.numeric(fdata[nna, as.character(levels_dbar[i])])), alpha = .25, size = 1.5 ) +
scale_color_viridis(name = 'Temp (°C)', option = "C", breaks = my_breaks, labels = round(my_breaks,1), limits = c(minT,maxT), oob = squish) +
geom_point(data = utm_coords_depthbar[i,], aes(x = lon.utm, y = lat.utm), color = "darkslategray", shape = 13, size = 4)
save.image("~/R/ITP_grddata/data.RData")
setd(..)
setwd(..)
setwd("..")
wd <- 'arcticPlotting'
dir.create(wd)
setwd(wd)
rm(wd)
seq(1,100)
seq <- seq(1,100)
center <- c(max_x/2,max_y/2)
max_x <- 2048
max_y <- 2048
center <- c(max_x/2,max_y/2)
rm(seq)
x <- radius × cos( phi )
y <- radius × sin( phi )
x <- radius * cos( phi )
y <- radius * sin( phi )
radius <- 90-82
phi <- 225
x <- radius * cos( phi )
y <- radius * sin( phi )
radius <- 20
phi <- 135
max_x <- 2048
max_y <- 2048
center <- c(max_x/2,max_y/2)
maxlat <- max(radius)
x <- radius * cos( phi )
y <- radius * sin( phi )
radius <- 20
phi <- 25
x <- radius * cos( phi )
y <- radius * sin( phi )
radius <- 13
phi <- 22.6
x <- radius * cos( phi )
y <- radius * sin( phi )
?cos
phi
cos( phi )
cos(22.6)
cos(22,6)
cos(22.6)
cospi(22.6)
cospi(22)
cos(22)
Int(cos(22))
M_PI
cos(90)
tan(5/12)
phi <- 22.6 * π/180
phi <- 22.6 * pi/180
x <- radius * cos( phi )
y <- radius * sin( phi )
phi <- 125 * pi/180
radius <- 13
phi <- 45 * pi/180
max_x <- 2048
max_y <- 2048
center <- c(max_x/2,max_y/2)
maxlat <- max(radius)
x <- radius * cos( phi )
y <- radius * sin( phi )
phi <- 12 * pi/180
max_x <- 2048
max_y <- 2048
center <- c(max_x/2,max_y/2)
maxlat <- max(radius)
x <- radius * cos( phi )
y <- radius * sin( phi )
phi <- 90 * pi/180
x <- radius * cos( phi )
y <- radius * sin( phi )
phi <- 89.9999 * pi/180
x <- radius * cos( phi )
y <- radius * sin( phi )
phi <- 90 * pi/180
max_x <- 2048
max_y <- 2048
center <- c(max_x/2,max_y/2)
maxlat <- max(radius)
x <- radius * cos( phi )
y <- radius * sin( phi )
phi <- 12 * pi/180
max_x <- 2048
max_y <- 2048
center <- c(max_x/2,max_y/2)
maxlat <- max(radius)
x <- radius * cos( phi )
y <- radius * sin( phi )
lon <- 225
radius <- 13
while(lon >= 90) {
max90degrees <- lon - 90
}
max90degrees <- lon
while(max90degrees >= 90) {
max90degrees <- lon - 90
}
lon <- 225
radius <- 13
max90degrees <- lon
while(max90degrees >= 90) {
max90degrees <- max90degrees - 90
}
phi <- max90degrees * pi/180
max_x <- 2048
max_y <- 2048
center <- c(max_x/2,max_y/2)
maxlat <- max(radius)
x <- radius * cos( phi )
y <- radius * sin( phi )
if(lon > 90 && lon <= 180 ) {
yt <- y
y <- x
x <- -yt
}
if(lon > 180 && lon <= 270 ) {
x <- -x
y <- -y
}
if(lon > 270 && lon <= 360 ) {
yt <- y
y <- -x
x <- yt
}
lon <- 280
radius <- 13
max90degrees <- lon
while(max90degrees >= 90) {
max90degrees <- max90degrees - 90
}
phi <- max90degrees * pi/180
max_x <- 2048
max_y <- 2048
center <- c(max_x/2,max_y/2)
maxlat <- max(radius)
x <- radius * cos( phi )
y <- radius * sin( phi )
if(lon > 90 && lon <= 180 ) {
yt <- y
y <- x
x <- -yt
}
if(lon > 180 && lon <= 270 ) {
x <- -x
y <- -y
}
if(lon > 270 && lon <= 360 ) {
yt <- y
y <- -x
x <- yt
}
lon <- 350
radius <- 13
max90degrees <- lon
while(max90degrees >= 90) {
max90degrees <- max90degrees - 90
}
phi <- max90degrees * pi/180
max_x <- 2048
max_y <- 2048
center <- c(max_x/2,max_y/2)
maxlat <- max(radius)
x <- radius * cos( phi )
y <- radius * sin( phi )
if(lon > 90 && lon <= 180 ) {
yt <- y
y <- x
x <- -yt
}
if(lon > 180 && lon <= 270 ) {
x <- -x
y <- -y
}
if(lon > 270 && lon <= 360 ) {
yt <- y
y <- -x
x <- yt
}
lon <- 20
radius <- 90-79
max90degrees <- lon
while(max90degrees >= 90) {
max90degrees <- max90degrees - 90
}
phi <- max90degrees * pi/180
max_x <- 2048
max_y <- 2048
center <- c(max_x/2,max_y/2)
maxlat <- max(radius)
x <- radius * cos( phi )
y <- radius * sin( phi )
if(lon > 90 && lon <= 180 ) {
yt <- y
y <- x
x <- -yt
}
if(lon > 180 && lon <= 270 ) {
x <- -x
y <- -y
}
if(lon > 270 && lon <= 360 ) {
yt <- y
y <- -x
x <- yt
}
coord_latlon_xy_transform <- function(lat,lon) {
radius <- 90-lat
max90degrees <- lon
while(max90degrees >= 90) {
max90degrees <- max90degrees - 90
}
phi <- max90degrees * pi/180
x <- radius * cos( phi )
y <- radius * sin( phi )
if(lon > 90 && lon <= 180 ) {
yt <- y
y <- x
x <- -yt
}
if(lon > 180 && lon <= 270 ) {
x <- -x
y <- -y
}
if(lon > 270 && lon <= 360 ) {
yt <- y
y <- -x
x <- yt
}
}
coord_latlon_xy_transform(75,30)
coord_latlon_xy_transform(75,40)
x <- coord_latlon_xy_transform(75,40)
coord_latlon_xy_transform <- function(lat,lon) {
radius <- 90-lat
max90degrees <- lon
while(max90degrees >= 90) {
max90degrees <- max90degrees - 90
}
phi <- max90degrees * pi/180
x <- radius * cos( phi )
y <- radius * sin( phi )
if(lon > 90 && lon <= 180 ) {
yt <- y
y <- x
x <- -yt
}
if(lon > 180 && lon <= 270 ) {
x <- -x
y <- -y
}
if(lon > 270 && lon <= 360 ) {
yt <- y
y <- -x
x <- yt
}
print(x,y)
}
coord_latlon_xy_transform(75,40)
coord_latlon_xy_transform <- function(lat,lon) {
radius <- 90-lat
max90degrees <- lon
while(max90degrees >= 90) {
max90degrees <- max90degrees - 90
}
phi <- max90degrees * pi/180
x <- radius * cos( phi )
y <- radius * sin( phi )
if(lon > 90 && lon <= 180 ) {
yt <- y
y <- x
x <- -yt
}
if(lon > 180 && lon <= 270 ) {
x <- -x
y <- -y
}
if(lon > 270 && lon <= 360 ) {
yt <- y
y <- -x
x <- yt
}
print(x)
print(y)
}
coord_latlon_xy_transform(75,40)
xy<-coord_latlon_xy_transform(75,40)
transform_coord()
transform_coord
coord_latlon_xy_transform <- function(lon = NULL, lat = NULL, new.names = c("x", "y")) {
radius <- 90-lat
max90degrees <- lon
while(max90degrees >= 90) {
max90degrees <- max90degrees - 90
}
phi <- max90degrees * pi/180
x <- radius * cos( phi )
y <- radius * sin( phi )
if(lon > 90 && lon <= 180 ) {
yt <- y
y <- x
x <- -yt
}
if(lon > 180 && lon <= 270 ) {
x <- -x
y <- -y
}
if(lon > 270 && lon <= 360 ) {
yt <- y
y <- -x
x <- yt
}
out <- cbind(x,y)
}
xy<-coord_latlon_xy_transform(40,78)
xy
coord_latlon_xy_transform <- function(lon = NULL, lat = NULL, new.names = c("x", "y")) {
radius <- 90-lat
max90degrees <- lon
while(max90degrees >= 90) {
max90degrees <- max90degrees - 90
}
phi <- max90degrees * pi/180
x <- radius * cos( phi )
y <- radius * sin( phi )
if(lon > 90 && lon <= 180 ) {
yt <- y
y <- x
x <- -yt
}
if(lon > 180 && lon <= 270 ) {
x <- -x
y <- -y
}
if(lon > 270 && lon <= 360 ) {
yt <- y
y <- -x
x <- yt
}
#out <- cbind(x,y)
}
xy<-coord_latlon_xy_transform(40,78)
coord_latlon_xy_transform <- function(lon = NULL, lat = NULL) {
radius <- 90-lat
max90degrees <- lon
while(max90degrees >= 90) {
max90degrees <- max90degrees - 90
}
phi <- max90degrees * pi/180
x <- radius * cos( phi )
y <- radius * sin( phi )
if(lon > 90 && lon <= 180 ) {
yt <- y
y <- x
x <- -yt
}
if(lon > 180 && lon <= 270 ) {
x <- -x
y <- -y
}
if(lon > 270 && lon <= 360 ) {
yt <- y
y <- -x
x <- yt
}
out <- cbind(x,y)
}
xy<-coord_latlon_xy_transform(40,78)
lon <- runif(50,0,360)
lat <- runif(50,71,90)
xy<-coord_latlon_xy_transform(lon,lat)
xy
xy$x
xy[,x]
xy[,y]
xy[x,]
xy[1]
xy[1,]
xy[1,]$x
xy[1,1]
